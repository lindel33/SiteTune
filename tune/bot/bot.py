import time
from pprint import pprint
import requests

import telebot
from data import (get_category, get_products,
                  get_detail_product, get_series,
                  get_current_product, get_all_products, get_not_category)

# TELEGRAM_URL = 'https://api.telegram.org/bot5239855839:AAGpK1VN7Lr2LDkq0WRC4onTLbYTWyrcc3g'
TOKEN = '5239855839:AAGpK1VN7Lr2LDkq0WRC4onTLbYTWyrcc3g'
URL_BITRIX = 'https://im.bitrix.info/imwebhook/eh/cde3fe41e972cc1f1501bbd0a6d330a11644378495/'
client = telebot.TeleBot(TOKEN)


def bitrix_client(message):
    try:
        jsn = message.__dict__.get('json')
        ts = {'update_id': 287246100,
              'message': {'message_id': jsn['message_id'],
                          'from': {'id': jsn['from']['id'],
                                   'is_bot': False,
                                   'first_name': jsn['from']['first_name'],
                                   'language_code': jsn['from']['language_code']},
                          'chat': {'id': jsn['chat']['id'],
                                   'first_name': jsn['chat']['first_name'],
                                   'type': jsn['chat']['type']},
                          'date': jsn['date'],
                          'text': jsn['text']}}

        requests.post(URL_BITRIX, json=ts)
        if message.text.lower().split()[0] == '–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å' or \
                message.text.lower() == '–∫—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ':
            start_message(message, text='–í–∞—à –∑–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω üëç \n'
                                        '–ú–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –≤ –ø—É—Ç–∏ üêå')
    except Exception as _:
        jsn = message.__dict__.get('json')
        ts = {'update_id': 287246100,
              'message': {'message_id': jsn['message_id'],
                          'from': {'id': jsn['from']['id'],
                                   'is_bot': False,
                                   'first_name': jsn['from']['first_name'],
                                   'language_code': jsn['from']['language_code']},
                          'chat': {'id': jsn['chat']['id'],
                                   'first_name': jsn['chat']['first_name'],
                                   'type': jsn['chat']['type']},
                          'date': jsn['date'],
                          'text': jsn['text']}}

        requests.post(URL_BITRIX, json=ts)
        start_message(message, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üôÑ\n'
                                    '–ù–∞–ø–∏—à–∏—Ç–µ –µ—â–µ —Ä–∞–∑')


def send_keyboard_category(message, current_category):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–æ–¥–µ–ª–µ–π iPhone 11 / iPhone 12 / iPhone 13
    :param message:
    :param current_category:
    :return:
    """

    text = message.text.split()[1]  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–µ–∑ –∫–∞—Ä—Ç–∏–Ω–∫–∏
    category = [[x[0]] for x in get_series(text) if x[0] in current_category]
    if category == []:
        start_message(message,
                      text='–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏ —Å–µ–π—á–∞—Å –ø—É—Å—Ç–æüòî\n'
                           '–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ —É –Ω–∞—Å –≤ –∫–∞–Ω–∞–ª–µ!)')
        return 0
    category.append(['–ù–∞–∑–∞–¥'])
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = category
    client.send_message(chat_id=message.chat.id,
                        text='–ò—â—É: ' + message.text,
                        reply_markup=keyboard_category)


def send_keyboard_product(message, text):
    """
    –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –Ω–∞–ª–∏—á–∏—è –º–æ–¥–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–æ–Ω–æ–π –º–æ–¥–µ–ª–∏/ —Å–µ—Ä–∏–∏
    :param message:
    :param text:
    :return:
    """
    products = [x[1] for x in get_products(text)]
    products.sort()
    products = [[x] for x in products]
    if message.text.split()[1].lower() == 'watch':
        products.append(['–ù–∞–∑–∞–¥ –∫ Watch'])
    else:
        products.append(['–ù–∞–∑–∞–¥ –∫ ' + text.split()[0]])
    keyboard_products = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_products.keyboard = products
    client.send_message(chat_id=message.chat.id,
                        text='–ò—â—É: ' + text,
                        reply_markup=keyboard_products)


def send_keyboard_pay(message):
    """
    –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param message:
    :return:
    """
    name = message.text.split()
    name = name[0] + ' ' + name[1]
    products = [x[1] for x in get_products(name)]
    if message.text in products:
        products.remove(message.text)
    products.sort()
    products = [[x] for x in products]
    products.append(['–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å\n' + message.text])
    pprint(message.text)
    if message.text.split()[1].lower() == 'watch':
        products.append(['–ù–∞–∑–∞–¥ –∫ Watch'])
    elif message.text.split()[0] in get_not_category():
        pprint(message.text)
        products.append(['–ù–∞–∑–∞–¥ –∫ –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞–º'])
    else:
        products.append(['–ù–∞–∑–∞–¥ –∫ ' + message.text.split()[0]])
        pprint(message.text.split()[0].lower())

    keyboard = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard.keyboard = products
    detail_product = get_detail_product(message.text)
    f1, f2, f3 = open('media/' + detail_product[1], 'rb'), \
                 open('media/' + detail_product[2], 'rb'), \
                 open('media/' + detail_product[3], 'rb')
    f1, f2, f3 = f1.read(), f2.read(), f3.read()

    client.send_media_group(chat_id=message.chat.id, media=[
        telebot.types.InputMediaPhoto(f1, caption=detail_product[6]),
        telebot.types.InputMediaPhoto(f2),
        telebot.types.InputMediaPhoto(f3), ])
    client.send_message(chat_id=message.chat.id,
                        text='–•–æ—Ç–∏—Ç–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å —ç—Ç—É –º–æ–¥–µ–ª—å?',
                        reply_markup=keyboard)


@client.message_handler(commands=['start'])
def start_message(message, text='–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏?'):
    category = get_category()
    categories = [[x[1]] for x in category]
    categories.insert(0, ['–ú–æ–π –±—é–¥–∂–µ—Ç'])
    categories.insert(1, ['–ö—É–ø–∏—Ç—å –Ω–æ–≤–æ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ'])

    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = categories
    client.send_message(chat_id=message.chat.id,
                        text=text,
                        reply_markup=keyboard_category)


@client.message_handler(func=lambda message: message.text == '–ú–æ–π –±—é–¥–∂–µ—Ç')
def filter_price(message):
    pprint('–ë—é–¥–∂–µ—Ç')
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = [
        ['–ë—é–¥–∂–µ—Ç –Ω–∞ iPhone'],
        ['–ë—é–¥–∂–µ—Ç –Ω–∞ iPad'],
        ['–ë—é–¥–∂–µ—Ç –Ω–∞ MacBook'],
        ['–ë—é–¥–∂–µ—Ç –Ω–∞ AirPods'],
        ['–ë—é–¥–∂–µ—Ç –Ω–∞ Watch'],
        ['–ë—é–¥–∂–µ—Ç –Ω–∞ –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞'],

    ]
    client.send_message(chat_id=message.chat.id,
                        text='–ß—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–∏–º?',
                        reply_markup=keyboard_category)


@client.message_handler(func=lambda message: message.text.split()[0] == '–ë—é–¥–∂–µ—Ç')
def filter_price(message):

    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = [['']]
    # [
    #     ['–î–æ 10_000 –Ω–∞ ' + message.text.split()[2]],
    #     ['–î–æ 20_000 –Ω–∞ ' + message.text.split()[2]],
    #     ['–î–æ 40_000 –Ω–∞ ' + message.text.split()[2]],
    #     ['–î–æ 60_000 –Ω–∞ ' + message.text.split()[2]],
    #     ['–û—Ç 60_000 –Ω–∞ ' + message.text.split()[2]],
    #
    # ]
    client.send_message(chat_id=message.chat.id,
                        text='–≠–≠–≠–≠–≠ –¢–´ —á–µ –≤ –±—é–¥–∂–µ—Ç –∑–∞—à–µ–ª?\n–ü–∏—à–∏ /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–ø—è—Ç—å',
                        reply_markup=keyboard_category)


@client.message_handler(func=lambda message: message.text.split()[0] == '–î–æ ')
def filter_price(message):
    keyboard_category = telebot.types.ReplyKeyboardMarkup(True, True)
    keyboard_category.keyboard = [
        [''],

    ]
    client.send_message(chat_id=message.chat.id,
                        text='–í–æ—Ç —á—Ç–æ –µ—Å—Ç—å:',
                        reply_markup=keyboard_category)


@client.message_handler(content_types=['text'])
def get_products_ctg(message):
    pprint(message.text)
    try:

        menu = ['–ú–æ–π –±—é–¥–∂–µ—Ç', 'üì± iPhone', 'üì≤ iPad', 'üíª MacBook',
                'üéß AirPods', '‚åöÔ∏è Watch',
                '‚å®Ô∏è –î–æ–ø. —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞']

        current_category = list(set([x[1] for x in get_current_product()]))

        category = []
        all_products = [x[0] for x in get_all_products()]
        tmp_text = []

        if len(message.text.split()) > 2:
            tmp_text = [x for x in menu if x.split()[1] == message.text.split()[2]]

        if message.text.lower() == '–Ω–∞–∑–∞–¥':
            start_message(message)

        if message.text in menu:
            send_keyboard_category(message, current_category)

        elif len(tmp_text) != 0 and tmp_text[0] in menu:
            if tmp_text[0] in menu:
                message.text = tmp_text[0]
                send_keyboard_category(message, current_category)

        if message.text in current_category:
            text = message.text
            send_keyboard_product(message, text)

        elif message.text in all_products:
            send_keyboard_pay(message)

        else:
            if message.text not in menu:
                if message.text.lower() != '–Ω–∞–∑–∞–¥':
                    bitrix_client(message)
    except:
        start_message(message, text='–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –¢–µ–ª–µ–≥—Ä–∞–º–º–∞üò•\n'
                                    '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç\n'
                                    '–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É\n'
                                    '‚Äî –í–∏–∫—Ç–æ—Ä–∏–∏ @VasViktory ‚òùÔ∏èüëç')


while True:
    try:
        client.polling(none_stop=True)

    except Exception as e:
        # client.delete_webhook()
        time.sleep(1)
